PART I:

Client connects to proxy
proxy validates request
info from server displayed to the client


Use ports 3274 and 3275 * Specifically for my use *
SERVER = 3275
PROXY = 3274

When debugging and running the proxy:
- Start 1 session and do ./start_tiny (myPort)
- Start another session (either by loading through localhost on a browser)
or by using your proxy 
- You can use telnet to chat with the server 
- telnet localhost (myPort)
	GET / HTTP/1.1
	X-header: Test
	<Enter key>
	
	* Gets server reply *
	
	POST /cgi-bin/post HTTP/1.1
	Content-Length: 10
	
	* Enter your own data *
	
	* Server then replies *
	
- Instead you can use curl which fetches info from the web
	curl -v http://localhost:myPort/home.html
	
	can also add headers yourself 
	curl -v http://localhost:myPort/home.html -H 'X-Header: Test'
	
	Need to also make sure if its not ASCII
	curl -v --data-binary Hello http://localhost:myPort/cgi-bin/post -H 'X-Header: Test'
	
	
	Can also send your own file then call it using curl
	echo hello > myFile.txt
	curl -v --data-binary @myFile.txt http://localhost:myPort/cgi-bin/post -H 'X-Header: Test'
	
	To then test your proxy you can do
	curl -v --proxy http://localhost:myPort http://localhost:myPort/TEST -H 'X-Header: Test'

- Last tool is netcat, instead of starting tiny-server you can use nc to see what the SERVER RECEIVES
useful for when you are unsure what you forward from your proxy to the sever

	Listens and sends whatever it sees on the stdin
	nc -klp (myPort)
	
	netcat cannot handle multiple threads
	
	
	
PART II:

3 libs compiled and linked with our proxy already

1) Pthread - used for multithreading capabilities
2) rio - Used for reading and writing from proxy/server
3) open - opens client and listen for proxy/server

sbuf - Producer-consumer buffer
a thread will write and multiple threads will read

dict - Used instead of malloc and stores it all in a nice way instead of using malloc for everything
1) headers
2) parameters (mapping url to url received)
3) cache

PROXY SHOULD NEVER CRASH

adding more .c files if you split up implementation add to
MAKEFILE file under SOURCES



